{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./styles.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const Transactions=()=>{const[transactions,setTransactions]=useState([]);const[newTransaction,setNewTransaction]=useState({Category:'',Amount:'',Description:'',TransactionID:''});const[successMessage,setSuccessMessage]=useState('');const handleInputChange=e=>{const{name,value}=e.target;setNewTransaction({...newTransaction,[name]:value});};const handleSubmit=async e=>{e.preventDefault();try{const payload={Category:newTransaction.Category,Amount:newTransaction.Amount,Description:newTransaction.Description};if(!payload.Amount||payload.Amount===0){console.error('Amount cannot be empty or zero');return;}const response=await fetch('/transactions',{method:'POST',headers:{'Content-Type':'application/json'},credentials:'include',body:JSON.stringify(payload)});if(response.ok){const addedTransaction=await response.json();setTransactions([...transactions,addedTransaction]);setSuccessMessage('Transaction successfully added!');setNewTransaction({// Reset form fields after successful addition\nCategory:'',Amount:'',Description:'',TransactionID:''});console.log('Transaction successfully added!');}else{console.error('Failed to add transaction');}}catch(error){console.error('Error adding transaction:',error);}};const handleUpdate=async transactionId=>{try{const response=await fetch(\"/transactions/\".concat(transactionId),{method:'PUT',headers:{'Content-Type':'application/json'},credentials:'include',body:JSON.stringify(newTransaction)});if(response.ok){const updatedTransaction=await response.json();const updatedTransactions=transactions.map(t=>t.TransactionID===transactionId?updatedTransaction:t);setTransactions(updatedTransactions);console.log('Transaction updated successfully!');}else{console.error('Failed to update transaction');}}catch(error){console.error('Error updating transaction:',error);}};const handleDelete=async transactionId=>{try{const response=await fetch(\"/transactions/\".concat(transactionId),{method:'DELETE',credentials:'include'});if(response.ok){const updatedTransactions=transactions.filter(t=>t.TransactionID!==transactionId);setTransactions(updatedTransactions);console.log('Transaction deleted successfully!');}else{console.error('Failed to delete transaction');}}catch(error){console.error('Error deleting transaction:',error);}};useEffect(()=>{fetch('/transactions').then(response=>{if(!response.ok){throw new Error('Network response not okay');}return response.json();}).then(data=>{if(!data||!Array.isArray(data)){throw new Error('Invalid response format');}// Transform each Transaction to a serializable format\nconst formattedTransactions=data.map(transaction=>({Category:transaction.Category,Amount:transaction.Amount,Description:transaction.Description,TransactionID:transaction.TransactionID}));setTransactions(formattedTransactions);// Update transactions state\n}).catch(error=>console.error('Error fetching transactions:',error));},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"section\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Transactions\"}),successMessage&&/*#__PURE__*/_jsx(\"p\",{style:{color:'green'},children:successMessage}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"transaction-form\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Category:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"Category\",value:newTransaction.Category,onChange:handleInputChange})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Amount:\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",name:\"Amount\",value:newTransaction.Amount,onChange:handleInputChange})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Description:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"Description\",value:newTransaction.Description,onChange:handleInputChange})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Add Transaction\"})]}),/*#__PURE__*/_jsx(\"ul\",{className:\"transaction-list\",children:transactions.map(transaction=>/*#__PURE__*/_jsxs(\"li\",{className:\"transaction-item\",children:[/*#__PURE__*/_jsx(\"strong\",{children:transaction.Category}),\" - \",transaction.Amount,\" USD\",/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleUpdate(transaction.TransactionID),children:\"Update\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleDelete(transaction.TransactionID),children:\"Delete\"})]},transaction.TransactionID))})]});};export default Transactions;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","Transactions","transactions","setTransactions","newTransaction","setNewTransaction","Category","Amount","Description","TransactionID","successMessage","setSuccessMessage","handleInputChange","e","name","value","target","handleSubmit","preventDefault","payload","console","error","response","fetch","method","headers","credentials","body","JSON","stringify","ok","addedTransaction","json","log","handleUpdate","transactionId","concat","updatedTransaction","updatedTransactions","map","t","handleDelete","filter","then","Error","data","Array","isArray","formattedTransactions","transaction","catch","className","children","style","color","onSubmit","type","onChange","onClick"],"sources":["/home/grace/projects/maya_prac/alx_project1/finance_tracker/react_frontend/src/components/Transactions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './styles.css';\n\nconst Transactions = () => {\n  const [transactions, setTransactions] = useState([]);\n  const [newTransaction, setNewTransaction] = useState({\n    Category: '',\n    Amount: '',\n    Description: '',\n    TransactionID: ''\n  });\n\n  const [successMessage, setSuccessMessage] = useState('');\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setNewTransaction({ ...newTransaction, [name]: value });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const payload = {\n        Category: newTransaction.Category,\n        Amount: newTransaction.Amount,\n        Description: newTransaction.Description,\n      };\n\n      if (!payload.Amount || payload.Amount === 0) {\n        console.error('Amount cannot be empty or zero');\n        return;\n    }\n    const response = await fetch('/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n      body: JSON.stringify(payload),\n    });\n    if (response.ok) {\n      const addedTransaction = await response.json();\n      setTransactions([...transactions, addedTransaction]);\n      setSuccessMessage('Transaction successfully added!');\n      setNewTransaction({ // Reset form fields after successful addition\n        Category: '',\n        Amount: '',\n        Description: '',\n        TransactionID: ''\n      });\n      console.log('Transaction successfully added!');\n    } else {\n\tconsole.error('Failed to add transaction');\n        }\n    } catch (error) {\n\t    console.error('Error adding transaction:', error);\n    }\n  };\n\n  const handleUpdate = async (transactionId) => {\n    try {\n      const response = await fetch(`/transactions/${transactionId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(newTransaction),\n      });\n\n      if (response.ok) {\n        const updatedTransaction = await response.json();\n        const updatedTransactions = transactions.map((t) =>\n          t.TransactionID === transactionId ? updatedTransaction : t\n        );\n        setTransactions(updatedTransactions);\n        console.log('Transaction updated successfully!');\n      } else {\n        console.error('Failed to update transaction');\n      }\n    } catch (error) {\n      console.error('Error updating transaction:', error);\n    }\n  };\n\n  const handleDelete = async (transactionId) => {\n    try {\n      const response = await fetch(`/transactions/${transactionId}`, {\n        method: 'DELETE',\n        credentials: 'include',\n      });\n\n      if (response.ok) {\n        const updatedTransactions = transactions.filter((t) => t.TransactionID !== transactionId);\n        setTransactions(updatedTransactions);\n        console.log('Transaction deleted successfully!');\n      } else {\n        console.error('Failed to delete transaction');\n      }\n    } catch (error) {\n      console.error('Error deleting transaction:', error);\n    }\n  };\n\n\n  useEffect(() => {\n  fetch('/transactions')\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response not okay');\n      }\n      return response.json();\n    })\n    .then(data => {\n      if (!data || !Array.isArray(data)) {\n        throw new Error('Invalid response format');\n      }\n      // Transform each Transaction to a serializable format\n      const formattedTransactions = data.map(transaction => ({\n        Category: transaction.Category,\n        Amount: transaction.Amount,\n        Description: transaction.Description,\n        TransactionID: transaction.TransactionID,\n      }));\n      setTransactions(formattedTransactions); // Update transactions state\n    })\n    .catch(error => console.error('Error fetching transactions:', error));\n}, []);\n\n  return (\n    <div className=\"section\">\n      <h2>Transactions</h2>\n      {successMessage && <p style={{ color: 'green' }}>{successMessage}</p>}\n      <form onSubmit={handleSubmit} className=\"transaction-form\">\n        <label>\n          Category:\n          <input\n            type=\"text\"\n            name=\"Category\"\n            value={newTransaction.Category}\n            onChange={handleInputChange}\n          />\n        </label>\n        <label>\n          Amount:\n          <input\n            type=\"number\"\n            name=\"Amount\"\n            value={newTransaction.Amount}\n            onChange={handleInputChange}\n          />\n        </label>\n        <label>\n          Description:\n          <input\n            type=\"text\"\n            name=\"Description\"\n            value={newTransaction.Description}\n            onChange={handleInputChange}\n          />\n        </label>\n        <button type=\"submit\">Add Transaction</button>\n      </form>\n      <ul className=\"transaction-list\">\n        {transactions.map((transaction) => (\n          <li key={transaction.TransactionID} className=\"transaction-item\">\n            <strong>{transaction.Category}</strong> - {transaction.Amount} USD\n            <button onClick={() => handleUpdate(transaction.TransactionID)}>Update</button>\n            <button onClick={() => handleDelete(transaction.TransactionID)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Transactions;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}